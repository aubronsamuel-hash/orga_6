[CmdletBinding()]
param(
  [string]$OutFile = 'docs/REPO_TREE.md'
)
$ErrorActionPreference = 'Stop'

Write-Host 'repo_tree generated'

# Root path
$root = (Get-Location).Path

# Exclusions (paths containing these segments are ignored)
$exclude = '(\.git($|[\\/]))|(node_modules($|[\\/]))|(\.venv($|[\\/]))|(__pycache__($|[\\/]))'

# Collect directories (including empty ones)
$dirItems = Get-ChildItem -Recurse -Force -Directory |
  Where-Object { $_.FullName -notmatch $exclude }
# Also include top-level directories in case -Recurse misses none (it should include, but be explicit)
$dirItems += Get-ChildItem -Force -Directory |
  Where-Object { $_.FullName -notmatch $exclude }
$dirRel = $dirItems |
  ForEach-Object { $_.FullName.Substring($root.Length + 1).Replace('\\','/') } |
  Sort-Object -Unique

# Collect files
$fileRel = Get-ChildItem -Recurse -Force -File |
  Where-Object { $_.FullName -notmatch $exclude } |
  ForEach-Object { $_.FullName.Substring($root.Length + 1).Replace('\\','/') } |
  Sort-Object -Unique

# Compose document
$header = @(
  '# Repository Tree (autogenerated)',
  '',
  '> This file is generated to help Codex/guards validate repo structure.',
  '',
  '```'
)
$footer = @('```')
$lines  = @()
$lines += $dirRel
$lines += $fileRel

# Ensure docs directory exists
$docsDir = Join-Path $root 'docs'
if (-not (Test-Path $docsDir)) { New-Item -ItemType Directory -Path $docsDir | Out-Null }

# Write file (UTF8 LF)
($header + $lines + $footer) | Set-Content -Encoding UTF8 -Path $OutFile
