name: backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      COMPOSE_PROJECT_NAME: orga_ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Validate .env.example exists and non-empty
        run: |
          test -f .env.example || { echo '.env.example missing'; exit 1; }
          if ! grep -q "[^[:space:]]" .env.example; then echo '.env.example empty'; exit 1; fi
          cp .env.example .env

      - name: Build and start stack
        run: |
          docker compose up -d --build

      - name: Wait for API container health
        run: |
          for i in {1..120}; do
            state=$(docker inspect --format='{{json .State.Health.Status}}' orga_api 2>/dev/null || echo '"starting"')
            echo "health=$state"
            if [ "$state" = '"healthy"' ]; then exit 0; fi
            sleep 2
          done
          echo 'API container not healthy in time'
          docker compose logs --no-color > ci_docker_logs.txt || true
          exit 1

      - name: Curl health endpoint
        run: |
          curl -f http://localhost:8000/health

      - name: Upload logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-logs
          path: ci_docker_logs.txt

      - name: Tear down
        if: always()
        run: docker compose down -v

