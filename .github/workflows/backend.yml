name: backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      COMPOSE_PROJECT_NAME: orga_ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Validate .env.example exists and non-empty
        run: |
          test -f .env.example || { echo '.env.example missing'; exit 1; }
          if ! grep -q "[^[:space:]]" .env.example; then echo '.env.example empty'; exit 1; fi
          cp .env.example .env

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

      - name: Build and start stack
        run: |
          docker compose up -d --build

      - name: Wait for API health
        run: |
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || true)
            if [ "$code" = "200" ]; then echo OK; exit 0; fi
            sleep 2
          done
          echo 'API did not become healthy in time';
          docker compose logs --no-color > ci_docker_logs.txt || true
          exit 1

      - name: Run backend tests inside container
        run: |
          docker compose exec -T api python -m pip install -U pip && \
          docker compose exec -T api pip install -r /app/requirements.txt && \
          docker compose exec -T api python - << 'PY'
          import sys, json, urllib.request
          with urllib.request.urlopen('http://localhost:8000/health', timeout=5) as r:
              assert r.status == 200
              print(r.read().decode())
          PY

      - name: Dump logs on failure
        if: failure()
        run: docker compose logs --no-color > ci_docker_logs.txt || true

      - name: Upload logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-logs
          path: ci_docker_logs.txt

      - name: Tear down
        if: always()
        run: docker compose down -v
